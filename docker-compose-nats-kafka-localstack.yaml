services:
  nats:
    container_name: nats
    image: nats:2.9.17
    command: [ "-m", "8222" ]
    ports:
      - "4222:4222"
      - "8222:8222"
    networks:
      - app-network

  nats2:
    container_name: nats2
    image: nats:2.9.17
    command: [ "-m", "8223", "-p", "4223" ]
    ports:
      - "4223:4223"
      - "8223:8223"
    networks:
      - app-network

  zookeeper1:
    container_name: zookeeper1
    image: bitnami/zookeeper:3.7
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOO_AUTOPURGE_INTERVAL=1
    networks:
      - app-network

  kafka:
    container_name: kafka
    image: bitnami/kafka:3.5
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
      - KAFKA_CFG_ADVERTISED_LISTENERS=INSIDE://kafka:9093,OUTSIDE://localhost:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INSIDE:PLAINTEXT,OUTSIDE:SASL_PLAINTEXT
      - KAFKA_CFG_LISTENERS=INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper1:2181
      - KAFKA_INTER_BROKER_LISTENER_NAME=INSIDE
      - KAFKA_CFG_SASL_ENABLED_MECHANISMS=PLAIN
      - KAFKA_CFG_SASL_MECHANISM_INTER_BROKER_PROTOCOL=PLAIN
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ZOOKEEPER_TLS_VERIFY_HOSTNAME=false
      - KAFKA_CLIENT_USERS=kafka
      - KAFKA_CLIENT_PASSWORDS=kafka
      - KAFKA_CFG_MESSAGE_MAX_BYTES=20000000
    depends_on:
      zookeeper1:
        condition: service_started
    networks:
      - app-network

  init-kafka:
    container_name: init-kafka
    image: bitnami/kafka:3.5
    depends_on:
      - kafka
    volumes:
      - ./kafka/init-kafka-topics.sh:/init-kafka-topics.sh
    entrypoint: [ "/bin/sh", "-c", "chmod +x /init-kafka-topics.sh && /init-kafka-topics.sh kafka" ]
    networks:
      - app-network

  zookeeper2:
    container_name: zookeeper2
    image: bitnami/zookeeper:3.7
    ports:
      - "2182:2182"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOO_AUTOPURGE_INTERVAL=1
      - ZOO_PORT_NUMBER=2182
    networks:
      - app-network

  kafka2:
    container_name: kafka2
    image: bitnami/kafka:3.5
    ports:
      - "9094:9094"
    environment:
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
      - KAFKA_CFG_ADVERTISED_LISTENERS=INSIDE://kafka2:9093,OUTSIDE://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INSIDE:PLAINTEXT,OUTSIDE:SASL_PLAINTEXT
      - KAFKA_CFG_LISTENERS=INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9094
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper2:2182
      - KAFKA_INTER_BROKER_LISTENER_NAME=INSIDE
      - KAFKA_CFG_SASL_ENABLED_MECHANISMS=PLAIN
      - KAFKA_CFG_SASL_MECHANISM_INTER_BROKER_PROTOCOL=PLAIN
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ZOOKEEPER_TLS_VERIFY_HOSTNAME=false
      - KAFKA_CLIENT_USERS=kafka
      - KAFKA_CLIENT_PASSWORDS=kafka
      - KAFKA_CFG_MESSAGE_MAX_BYTES=20000000
    depends_on:
      zookeeper2:
        condition: service_started
    networks:
      - app-network

  init-kafka2:
    container_name: init-kafka2
    image: bitnami/kafka:3.5
    depends_on:
      - kafka2
    volumes:
      - ./kafka/init-kafka-topics.sh:/init-kafka-topics.sh
    entrypoint: [ "/bin/sh", "-c", "chmod +x /init-kafka-topics.sh && /init-kafka-topics.sh kafka2" ]
    networks:
      - app-network

  localstack:
    container_name: localstack
    image: localstack/localstack:3.0.2
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3,s3api
      - PERSISTENCE=1
    volumes:
      - ./localstack/setup_s3_buckets.sh:/etc/localstack/init/ready.d/setup_s3_buckets.sh
      - ./localstack/protobufdesc/:/var/data/protobufdesc/
    healthcheck:
      test: [ "CMD-SHELL", "test -f /var/data/script_complete.flag" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
